struct Keys{
    array : [u8 * 9],
}


fn @get42(keys : Keys, values: &[u8], key: u8) -> u8 {
    
    let mut res = 0;

    //swap unroll for range to see the defference
    unroll(0,9, |i| {
            
            if keys.array(i) == key {// == key
                    res = i;

    }
            });

    values(res)
    

}

fn get42_cuda(keys : Keys, values: &[u8], key: u8) -> u8 {

    let grid   = (1, 1, 1);
    let block  = (1, 1, 1);
    let device = 0;
    let buf = alloc_cuda_unified(0,sizeof[int]());
    let buf_ = bitcast[&mut[i32 * 1]](buf.data);
    buf_(0) = 0;
    let mut res = 0;
    with cuda(device, grid, block){

            unroll(0,9, |i| {
                if keys.array(i) == key {// == key
                    buf_(0) = i;
                    // res = i;

                }
            });
        }

    synchronize_cuda(device);
    res = buf_(0);
    release(buf);
    values(res)

}


